package com.demo.ms.search.person.api.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import com.demo.ms.search.person.api.PersonController;
import com.demo.ms.search.person.entities.PersonEntity;
import com.demo.ms.search.person.model.Person;
import com.demo.ms.search.person.repository.specification.PersonAnnotatedSpecification;
import com.demo.ms.search.person.repository.PersonRepository;
import com.demo.ms.search.person.repository.specification.PersonSpecification;
import com.querydsl.core.types.Predicate;

@RestController
public class PersonControllerImpl implements PersonController {

    private final PersonRepository personRepository;

    private final ModelMapper modelMapper;

    public PersonControllerImpl(
            @Autowired final PersonRepository personRepository,
            @Autowired final ModelMapper modelMapper) {
        this.personRepository = personRepository;
        this.modelMapper = modelMapper;
    }

    @Override
    public ResponseEntity<Person> createNewPerson(final Person person) {
        final PersonEntity personEntity = mapToEntityAndCleanAutoGeneratedData(person);

        final PersonEntity savedPersonEntity = personRepository.saveAndFlush(personEntity);
        final Person savedPerson = modelMapper.map(savedPersonEntity, Person.class);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(savedPerson);
    }

    private PersonEntity mapToEntityAndCleanAutoGeneratedData(final Person person) {
        final PersonEntity personEntity = modelMapper.map(person, PersonEntity.class);
        personEntity.setId(null);
        personEntity.setCreated(null);
        personEntity.setLastUpdate(null);
        return personEntity;
    }

    @Override
    public ResponseEntity<Person> searchPersonsById(final long personId) {
        final Optional<PersonEntity> optionalPersonEntity = personRepository.findById(personId);
        return optionalPersonEntity
                .map(personEntity -> modelMapper.map(personEntity, Person.class))
                .map(person -> ResponseEntity.status(HttpStatus.OK).body(person))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(null));
    }

    @Override
    public ResponseEntity<List<Person>> searchPersonsByFirstName(final String name) {
        final List<PersonEntity> personsEntitySameName = personRepository.findByFirstname(name);

        return transformAndReturn(personsEntitySameName);
    }

    @Override
    public ResponseEntity<List<Person>> searchPersonsByFirstNameOrLastName(final String firstName, final String lastName) {
        final List<PersonEntity> personsEntity = personRepository.findByFirstnameOrLastname(firstName, lastName);

        return transformAndReturn(personsEntity);
    }

    @Override
    public ResponseEntity<List<Person>> searchByPersonData(final String firstName, final String lastName, final String email) {
        final PersonSpecification specFirstName = new PersonSpecification("firstname", firstName);
        final PersonSpecification specLastName = new PersonSpecification("lastname", lastName);
        final PersonSpecification specEmail = new PersonSpecification("email", email);

        final Specification<PersonEntity> spec = Specification.where(specFirstName).and(specLastName).and(specEmail);
        final List<PersonEntity> personsEntity = personRepository.findAll(spec);

        return transformAndReturn(personsEntity);
    }

    @Override
    public ResponseEntity<List<Person>> searchByPersonDataAnnotated(final PersonAnnotatedSpecification personEntitySpecification) {
        final List<PersonEntity> personsEntity = personRepository.findAll(personEntitySpecification);

        return transformAndReturn(personsEntity);
    }

    @Override
    public ResponseEntity<List<Person>> findAllByWebQuerydsl(final Predicate predicate, final Pageable pageable) {
        final Iterable<PersonEntity> personsEntitiesIt = personRepository.findAll(predicate, pageable);

        final List<PersonEntity> personsEntities = new ArrayList<>();
        personsEntitiesIt.forEach(personsEntities::add);
        return transformAndReturn(personsEntities);
    }

    @Override
    public ResponseEntity<List<Person>> findByPetName(final String petName) {
        final List<PersonEntity> personsEntity = personRepository.findByPetName(petName);

        return transformAndReturn(personsEntity);
    }

    private ResponseEntity<List<Person>> transformAndReturn(final List<PersonEntity> personEntities) {
        if (personEntities.isEmpty()) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body(null);
        } else {
            final List<Person> persons = personEntities.stream()
                    .map(personEntity -> modelMapper.map(personEntity, Person.class))
                    .collect(Collectors.toList());
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(persons);
        }
    }
}
